{"ast":null,"code":"import React, { useEffect } from 'react';\nimport WebFont from 'webfontloader';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Font = function Font(props) {\n  return React.createElement(\"div\", {\n    style: styleGen(props)\n  }, React.createElement(FontLoader, Object.assign({}, props)), props.children);\n};\n\nvar Text = function Text(props) {\n  return React.createElement(\"p\", Object.assign({}, _extends({}, Object.keys(props).reduce(function (object, key) {\n    if (!['family', 'italic', 'weight', 'onLoad', 'onError', 'onAllLoad', 'onAllError'].includes(key)) {\n      object[key] = props[key];\n    }\n\n    return object;\n  }, {})), {\n    style: _extends({}, styleGen(props), props.style)\n  }), React.createElement(FontLoader, Object.assign({}, props, {\n    text: props.children\n  })), props.children);\n};\n\nvar FontLoader = function FontLoader(_ref) {\n  var family = _ref.family,\n      _ref$weight = _ref.weight,\n      weight = _ref$weight === void 0 ? 400 : _ref$weight,\n      _ref$italic = _ref.italic,\n      italic = _ref$italic === void 0 ? false : _ref$italic,\n      _ref$provider = _ref.provider,\n      provider = _ref$provider === void 0 ? 'google' : _ref$provider,\n      _ref$onLoad = _ref.onLoad,\n      onLoad = _ref$onLoad === void 0 ? function () {} : _ref$onLoad,\n      _ref$onError = _ref.onError,\n      onError = _ref$onError === void 0 ? function () {} : _ref$onError,\n      _ref$onAllLoad = _ref.onAllLoad,\n      onAllLoad = _ref$onAllLoad === void 0 ? function () {} : _ref$onAllLoad,\n      _ref$onAllError = _ref.onAllError,\n      onAllError = _ref$onAllError === void 0 ? function () {} : _ref$onAllError,\n      _ref$text = _ref.text,\n      text = _ref$text === void 0 ? undefined : _ref$text;\n  useEffect(function () {\n    var WebFontConfig = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    };\n\n    if (provider === 'google') {\n      var fontFamily = GoogleFont({\n        family: family,\n        weight: weight,\n        italic: italic\n      });\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text: text\n      };\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      };\n    }\n\n    WebFont.load(WebFontConfig);\n  }, [family, weight, italic, provider, onLoad, onError]);\n  return null;\n};\n\nvar GoogleFont = function GoogleFont(_ref2) {\n  var family = _ref2.family,\n      _ref2$weight = _ref2.weight,\n      weight = _ref2$weight === void 0 ? 400 : _ref2$weight,\n      _ref2$italic = _ref2.italic,\n      italic = _ref2$italic === void 0 ? false : _ref2$italic;\n  var encodedURL = encodeURIComponent(family);\n\n  if (weight !== 400 && italic) {\n    encodedURL += \":bi\";\n  } else if (weight !== 400) {\n    encodedURL += \":\" + weight;\n  } else if (italic) {\n    encodedURL += \":i\";\n  }\n\n  return encodedURL;\n};\n\nvar styleGen = function styleGen(_ref3) {\n  var family = _ref3.family,\n      italic = _ref3.italic,\n      weight = _ref3.weight;\n  return {\n    fontFamily: \"'\" + family + \"'\",\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  };\n};\n\nexport default Font;\nexport { FontLoader, Text };","map":{"version":3,"mappings":"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","names":["Font","props","React","style","styleGen","FontLoader","children","Text","Object","keys","reduce","object","key","includes","text","family","weight","_ref$weight","italic","_ref$italic","provider","_ref$provider","onLoad","_ref$onLoad","onError","_ref$onError","onAllLoad","_ref$onAllLoad","onAllError","_ref$onAllError","undefined","useEffect","WebFontConfig","classes","fontactive","fontinactive","active","inactive","fontFamily","GoogleFont","google","families","custom","WebFont","load","_ref2$weight","_ref2$italic","encodedURL","encodeURIComponent","fontStyle","fontWeight"],"sources":["C:\\Users\\Shriram\\hackathon\\node_modules\\react-font\\src\\index.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\nimport WebFont from 'webfontloader'\n\ninterface Props extends LoaderProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst Font = (props: Props): JSX.Element => {\n  return (\n    <div style={styleGen(props)}>\n      <FontLoader {...props} />\n      {props.children}\n    </div>\n  )\n}\n\ninterface TextProps extends LoaderProps {\n  children: string\n}\n\nexport const Text = (\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLParagraphElement>,\n    HTMLParagraphElement\n  > &\n    TextProps\n): JSX.Element => {\n  return (\n    <p\n      {...{\n        ...Object.keys(props).reduce((object, key) => {\n          if (\n            ![\n              'family',\n              'italic',\n              'weight',\n              'onLoad',\n              'onError',\n              'onAllLoad',\n              'onAllError'\n            ].includes(key)\n          ) {\n            object[key] = props[key]\n          }\n          return object\n        }, {})\n      }} // pass props but remove font props\n      style={{ ...styleGen(props), ...props.style }} // combine the font style and any custom style from props\n    >\n      <FontLoader {...props} text={props.children} />\n      {props.children}\n    </p>\n  )\n}\n\ninterface LoaderProps extends FontProps {\n  provider?: string\n  onLoad?: (family: string, style: string) => void\n  onError?: (family: string, style: string) => void\n  onAllLoad?: () => void\n  onAllError?: () => void\n  text?: string\n}\n\nexport const FontLoader = ({\n  family,\n  weight = 400,\n  italic = false,\n  provider = 'google',\n  onLoad = () => {},\n  onError = () => {},\n  onAllLoad = () => {},\n  onAllError = () => {},\n  text = undefined\n}: LoaderProps): JSX.Element | null => {\n  useEffect(() => {\n    const WebFontConfig: WebFont.Config = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    }\n\n    if (provider === 'google') {\n      const fontFamily = GoogleFont({\n        family,\n        weight,\n        italic\n      })\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text\n      }\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      }\n    }\n\n    WebFont.load(WebFontConfig)\n  }, [family, weight, italic, provider, onLoad, onError])\n\n  return null\n}\n\nconst GoogleFont = ({ family, weight = 400, italic = false }: FontProps) => {\n  let encodedURL = encodeURIComponent(family)\n\n  if (weight !== 400 && italic) {\n    encodedURL += `:bi`\n  } else if (weight !== 400) {\n    encodedURL += `:${weight}`\n  } else if (italic) {\n    encodedURL += `:i`\n  }\n\n  return encodedURL\n}\n\ninterface FontProps {\n  family: string\n  weight?: number\n  italic?: boolean\n}\n\nconst styleGen = ({ family, italic, weight }: FontProps) => {\n  return {\n    fontFamily: `'${family}'`,\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  }\n}\n\nexport default Font\n"]},"metadata":{},"sourceType":"module"}